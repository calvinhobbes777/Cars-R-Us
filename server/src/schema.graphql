# import PostSubscriptionPayload, PostSubscriptionWhereInput from "./generated/prisma.graphql"

type Query {
  me: User
  post(id: ID!): Post
  posts: [Post!]
}

type Mutation {
  signup(newUser: newUserInput!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createMessage(newMessage: newMessageInput!, postId: ID!): Message!
  updateMessage(updateMessage: updateMessageInput!, messageId: ID!): Message!
  deleteMessage(id: ID!): Message!
  createPost(newPost: newPostInput!): Post!
  updatePost(updatePost: updatePostInput!, postId: ID!): Post!
  deletePost(id: ID!): Post!
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
}

type AuthPayload {
  user: User!
  token: String!
}

type Post {
  id: ID!
  year: Int!
  price: Int!
  mileage: Int!
  body: String!
  author: User!
  make: String!
  model: String!
  images: [String!]
  thread: [Message!]!
  condition: Condition!
  titleStatus: TitleStatus!
}

type User {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]!
}

type Message {
  id: ID!
  post: Post!
  author: User!
  body: String!
}

enum Condition {
  Fair
  LikeNew
  Excellent
  NeedsWork
}

enum TitleStatus {
  Other
  Clean
  Rebuilt
}

input newPostInput {
  year: Int!
  price: Int!
  mileage: Int!
  body: String!
  make: String!
  model: String!
  images: [String!]
  condition: Condition!
  titleStatus: TitleStatus!
}

input updatePostInput {
  year: Int
  price: Int
  mileage: Int
  body: String
  make: String
  model: String
  images: [String!]
  condition: Condition
  titleStatus: TitleStatus
}

input newUserInput {
  name: String!
  email: String!
  password: String!
}

input newMessageInput {
  body: String!
}

input updateMessageInput {
  body: String
}
